<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>RMarcus.info &#187; Personal</title>
	<atom:link href="http://rmarcus.info/?feed=rss2&#038;cat=15" rel="self" type="application/rss+xml" />
	<link>http://rmarcus.info</link>
	<description>It&#039;s all Frank&#039;s fault!</description>
	<lastBuildDate>Sun, 27 Oct 2013 08:46:08 +0000</lastBuildDate>
	<language>en-US</language>
		<sy:updatePeriod>hourly</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.8</generator>
	<item>
		<title>Lyapunov Fractals in Python: Performance and Pretty Pictures</title>
		<link>http://rmarcus.info/?p=314</link>
		<comments>http://rmarcus.info/?p=314#comments</comments>
		<pubDate>Fri, 15 Apr 2011 03:54:48 +0000</pubDate>
		<dc:creator><![CDATA[Ryan Marcus]]></dc:creator>
				<category><![CDATA[Computer Tips]]></category>
		<category><![CDATA[Personal]]></category>

		<guid isPermaLink="false">http://rmarcus.wordpress.com/?p=314</guid>
		<description><![CDATA[I spent some time earlier this week playing around with Lyapunov fractals in Python. While normally I wouldn&#8217;t consider Python to be a performance-packing language, the ease-of-use (programmer cycles vs. machine cycles) inherent in Python has always been attractive. However, I was able to speed up my Python code substantially using Psyco, the Python multiprocessing [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I spent some time earlier this week playing around with <a href="http://en.wikipedia.org/wiki/Lyapunov_fractal">Lyapunov fractals</a> in Python. While normally I wouldn&#8217;t consider Python to be a performance-packing language, the ease-of-use (programmer cycles vs. machine cycles) inherent in Python has always been attractive. However, I was able to speed up my Python code substantially using <a href="http://psyco.sourceforge.net/">Psyco</a>, the Python <a href="http://docs.python.org/library/multiprocessing.html">multiprocessing module</a>, and a fast implementation of Python called <a href="http://pypy.org/">PyPy</a>.</p>
<p>Lyapunov fractals are generated from a specific binary sequence, generally denoted with A&#8217;s and B&#8217;s. For example, the sequence &#8220;ABA&#8221; produces a different fractal than the sequence &#8220;BBAA.&#8221; An algorithm for generating these fractals is described by the Wolfram folk <a href="http://demonstrations.wolfram.com/LyapunovFractals/">here</a>.</p>
<p>Lyapunov fractals are formed by associating an exponent (which, from what I can determine, is generally between -2.0 and 2.0) with a color. Each point on a 4.0&#215;4.0 plane gets an exponent. A visual representation of the fractal is then formed by associating each exponent with a color.</p>
<p>Because of the computationally intense aspects of calculating an exponent, I decided to create one program to calculate all the exponent data, saving it to a file*, and another program to create an image from it. My source is available at the end of the post.</p>
<p>After I&#8217;d written my code, I felt the wraith of Python in the form of slowness. After some trivial optimizations, I found Pysco and the Python multiprocessing module.</p>
<p>Psyco is pretty straightforward: it does a bunch of JIT-style compilation (read: magic) on vanilla python to speed it up. It is pretty easy to use:<br />
<code><br />
import psyco<br />
psyco.full()<br />
</code></p>
<p>Or, if you are slightly more error-cautious:</p>
<p><code><br />
try:<br />
&nbsp;&nbsp;&nbsp;import psyco<br />
&nbsp;&nbsp;&nbsp;psyco.full()<br />
&nbsp;&nbsp;&nbsp;print "Psyco'd!"<br />
except ImportError:<br />
&nbsp;&nbsp;&nbsp;print "No psyco"<br />
&nbsp;&nbsp;&nbsp;pass<br />
</code></p>
<p>The Python multiprocessing library is a real gem. It provides a parallel version of the <a href="http://docs.python.org/library/functions.html#map">&#8220;map&#8221; function</a>. This is pretty awesome &#8212; since each exponent calculation depends only upon a point (embarrassingly parallel), it is easy to create a function that takes in a point and spits out an exponent.</p>
<p>Of course, all the concerns of parallel programming still apply. You can&#8217;t have any <a href="http://en.wikipedia.org/wiki/Race_condition">race conditions</a>, and your code needs to be conceptually parallel. Python takes care of all the messy bits (semaphores, join/fork management, etc.) for you.</p>
<p>If you were using the map() function like this:<br />
<code><br />
a = map (function, list)<br />
</code></p>
<p>&#8230; you can simply replace that line with:</p>
<p><code><br />
try:<br />
&nbsp;&nbsp;&nbsp;from multiprocessing import Pool<br />
&nbsp;&nbsp;&nbsp;pool = Pool(8)<br />
&nbsp;&nbsp;&nbsp;print "Parallel!"<br />
&nbsp;&nbsp;&nbsp;a = pool.map(function, list)<br />
except ImportError:<br />
&nbsp;&nbsp;&nbsp;print "Not parallel"<br />
&nbsp;&nbsp;&nbsp;a = map(function, list)<br />
</code></p>
<p>This will preform the map function in parallel (if the multiprocessing module is available) using 8 workers (which is pretty optimal for an i7 920).</p>
<p>I also discovered an alternative flavor of Python called <a href="http://pypy.org/">PyPy</a>, which is a performance-driven Python that uses technology similar to Psyco. Sadly, PyPy doesn&#8217;t have an implementation of the multiprocessing module, so I was forced to choose between PyPy and traditional Python with multiprocessing and Psyco. I was incredibly doubtful that PyPy&#8217;s speed would be able to make up for parallelism and Psyco. I&#8217;ll let the numbers talk for me.</p>
<p>The test system contains an un-overclocked i7 920 and 3GB of DDR3 RAM. These numbers are from generating a 1000&#215;1000 fractal worth of data with the sequence &#8220;AB&#8221; to a depth of 500 (iterations). I run Ubuntu 10.10 32-bit.</p>
<p>Time in seconds. Smaller is better.</p>
<p><script type="text/javascript" src="//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js"> {"chartType":"ColumnChart","chartName":"Python Accelerator Comparison","dataSourceUrl":"//spreadsheets.google.com/a/rmarcus.info/tq?key=0AmQWGSF3o-iidEt0bUNnYnAxay1naENJVGtBcUdHMEE&#038;transpose=0&#038;headers=1&#038;range=A1%3AF5&#038;gid=0&#038;pub=1","options":{"reverseCategories":false,"fontColor":"#fff","midColor":"#36c","pointSize":"0","headerColor":"#3d85c6","vAxis":{"format":"#0.###############"},"headerHeight":40,"is3D":false,"logScale":false,"hAxis":{"maxAlternation":1},"wmode":"opaque","title":"Python Accelerator Comparison","mapType":"hybrid","isStacked":false,"showTip":true,"displayAnnotations":true,"titleY":"Time","dataMode":"markers","colors":["#3366CC","#DC3912","#FF9900","#109618","#990099","#0099C6","#DD4477","#66AA00","#B82E2E","#316395"],"smoothLine":false,"maxColor":"#222","lineWidth":"2","labelPosition":"right","fontSize":"14px","hasLabelsColumn":true,"maxDepth":2,"legend":"right","allowCollapse":true,"cht":"bhg","minColor":"#ccc","reverseAxis":false,"width":600,"height":371},"refreshInterval":5} </script></p>
<table>
<tr>
<th>Trial</th>
<th>Python with Psyco and MP</th>
<th>Python with Pysco</th>
<th>Python with MP</th>
<th>Python</th>
<th>PyPy</th>
</tr>
<tr>
<td>Trial 1</td>
<td>36.4</td>
<td>273</td>
<td>253
<td>2041
<td>71</td>
</tr>
<tr>
<td>Trial 2</td>
<td>36.3</td>
<td>268</td>
<td>258</td>
<td>2042</td>
<td>66</td>
</tr>
<tr>
<td>Trial 3</td>
<td>35.2</td>
<td>269</td>
<td>255</td>
<td>2058</td>
<td>71</td>
</tr>
<tr>
<td>Average</td>
<td>35.966667</td>
<td>270</td>
<td>255.333333</td>
<td>2047</td>
<td>69.33333333</td>
</tr>
</table>
<p>Clearly, Python on its own is pretty darn slow. Psyco provides nearly a 10x speedup, and if you can write your code to take advantage of the multiprocessing library, you can go really fast.</p>
<p>The PyPy results, compared to the Pysco results, are quite impressive. If PyPy had an implementation of the multiprocessing library (which I&#8217;m fairly certain it doesn&#8217;t &#8212; feel free to correct me), it would probably dominate.</p>
<p>The multiprocessing results for this test aren&#8217;t completely fair &#8212; generating fractals is an <a href="http://en.wikipedia.org/wiki/Embarrassingly_parallel">embarrassingly parallel</a> problem. But, of course, if you can break your problem up into parallel pieces, you can expect a relatively big speed bump.</p>
<p>Conclusion: Python doesn&#8217;t have to be as slow as Python normally is. Drop-in replacements like Psyco can greatly accelerate code. if your code is vanilla enough to not require many external libraries (like PIL) then PyPy can probably give you quite the boost as well.</p>
<p>You can download my source <a href="http://debateresearchnet.fatcow.com/downloads/FractalPython.zip">here</a>.</p>
<p>Here&#8217;s some pretty pictures:<br />

<a href='http://rmarcus.info/?attachment_id=323'><img width="150" height="150" src="http://debateresearchnet.fatcow.com/wordpress/wp-content/uploads/2011/04/output-150x150.png" class="attachment-thumbnail" alt="output" /></a>
<a href='http://rmarcus.info/?attachment_id=324'><img width="150" height="150" src="http://debateresearchnet.fatcow.com/wordpress/wp-content/uploads/2011/04/output2-150x150.png" class="attachment-thumbnail" alt="output2" /></a>
</p>
<p>* A note about pickle: I realize that many Python developers would&#8217;ve decided to use pickle (or the faster cPickle) to save their exponent data to a file. I found cPickle to be far, far slower than just writing out comma separated values.</p>
]]></content:encoded>
			<wfw:commentRss>http://rmarcus.info/?feed=rss2&#038;p=314</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>10 reasons to date a programmer</title>
		<link>http://rmarcus.info/?p=129</link>
		<comments>http://rmarcus.info/?p=129#comments</comments>
		<pubDate>Wed, 23 Aug 2006 00:44:37 +0000</pubDate>
		<dc:creator><![CDATA[Ryan Marcus]]></dc:creator>
				<category><![CDATA[Personal]]></category>

		<guid isPermaLink="false">http://marcusfamily.info/~ryan/blog/?p=145</guid>
		<description><![CDATA[Created by yours truly. We are used to working in the dark. Strong finger muscles. We don&#8217;t mind reading manuals. We can quickly adapt to any interface. We can work all night without food. Precision hand accuracy. We understand inheritances, so you don&#8217;t have to worry about anything &#8220;strange.&#8221; We&#8217;re object oriented&#8230; in more ways [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Created by yours truly.</p>
<ol>
<li>We are used to working in the dark.</li>
<li>Strong finger muscles.</li>
<li>We don&#8217;t mind reading manuals.</li>
<li>We can quickly adapt to any interface.</li>
<li>We can work all night without food.</li>
<li>Precision hand accuracy.</li>
<li>We understand inheritances, so you don&#8217;t have to worry about anything &#8220;strange.&#8221;</li>
<li>We&#8217;re object oriented&#8230; in more ways then one!</li>
<li>Our connections have high upload rates.</li>
<li>We know all the uses of a microphone.</li>
</ol>
<p>Feel free to use it if you give me credit. Also, comment any more you can think of.</p>
]]></content:encoded>
			<wfw:commentRss>http://rmarcus.info/?feed=rss2&#038;p=129</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
